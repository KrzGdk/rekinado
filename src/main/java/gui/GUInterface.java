package main.java.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import main.java.gui.RekinadoMain.UIListener;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import main.java.rankine.TornadoGUI;
import main.java.simulation.Simulation;
import main.java.trees.TreeGUI;

/**
 * Klasa Głównego okna GUI
 * 
 * @author Jacek Pietras
 */
public class GUInterface extends javax.swing.JFrame{

	private static boolean started = false;
	private GUIInfo infoBox = null;
	
	public GUInterface() {
		initComponents();
		if (!started) {
			this.add(BG);
			started = true;
			start();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnSim = new javax.swing.JButton();
        BG = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "kontrola"));
        jPanel3.setName("nowa krzyzowka"); // NOI18N

        btnReset.setText("Reset");
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSim.setText("Symuluj");
        btnSim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSimMouseClicked(evt);
            }
        });
        btnSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSim, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnReset)
                .addComponent(btnSim))
        );

        BG.setBackground(new java.awt.Color(255, 255, 255));
        BG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        BG.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                BGComponentResized(evt);
            }
        });

        javax.swing.GroupLayout BGLayout = new javax.swing.GroupLayout(BG);
        BG.setLayout(BGLayout);
        BGLayout.setHorizontalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 772, Short.MAX_VALUE)
        );
        BGLayout.setVerticalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
		listener.actualizeUI(this);
		listener.reset();
    }//GEN-LAST:event_btnResetMouseClicked

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
       //print(lab);
    }//GEN-LAST:event_formComponentResized

    private void BGComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_BGComponentResized
       //print();
    }//GEN-LAST:event_BGComponentResized

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSimMouseClicked
        listener.actualizeUI(this);
		listener.simulate();
    }//GEN-LAST:event_btnSimMouseClicked

    private void btnSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSimActionPerformed

	public static void start() {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new GUInterface().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BG;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSim;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
       
	private static UIListener listener;

	/**
	 * Dodaje nasłuchiwacza eventów do gui
	 * 
	 * @param l nowy listener
	 */
	public void addListener(UIListener l) {
		listener = l;
	}

	/**
	 * Wyświetla okienko błędu
	 * @param text tekst do wyświetlenia
	 */
	public void dialog(String text){
		if(infoBox == null) infoBox = new GUIInfo(this, false);
		infoBox.setVisible(false);
		infoBox.setLocationRelativeTo(this);
		infoBox.setText(text);
		//infoBox.setTitle(text);
		infoBox.setVisible(true);
	}
	
	/**
	 * Zoom w grafice
	 */
	private static int printscale = 2;
	
	/**
	 * Wymiary Obszaru Wizualizacji
	 */
	private static int bgW, bgH ;	
	
	private static BufferedImage canvas = null;	
	private static double sin45 = Math.sin(Math.PI/4);
	
	/**
	 * Rzutuje tablice [x][y][z] na izometryczny rzut 2d
	 * 
	 * @param tab tablica [x][y][z]
	 * @return współrzędna x
	 */
	public static int toIzoX(double tab[]){
		return (int) Math.round((tab[0]+sin45*tab[1])*printscale);
	}

	/**
	 * Rzutuje tablice [x][y][z] na izometryczny rzut 2d
	 * 
	 * @param tab tablica [x][y][z]
	 * @return współrzędna y
	 */
	public static int toIzoY(double tab[]){
		//.8 to magiczna stała piękności
		return (int)-Math.round((tab[2]+sin45*tab[1])*printscale*.8); 
	}

	/**
	 * Normalizuje punkty Polygon do środka obrazka
	 * 
	 * @param p Polygon do znormalizowania
	 * @return znormalizowany Polygon
	 */
	public static Polygon normToCenter(Polygon p){ // To center of Word
		for(int i=0; i<p.npoints;i++){
			p.xpoints[i]+=(bgW/2 );
			p.ypoints[i]+=(bgH/2);
		}
		return p;
	}
	
	/**
	 * Sortuje drzewa dystansem od ekranu (Zsort)
	 * 
	 * @param tree tablica drzew
	 * @param ntree liczba drzew
	 */
	private void sortTrees(TreeGUI tree[], int ntree){
		TreeGUI temp;
		for(int i=0;i<ntree-1;i++){
			for(int j=0;j<ntree-i-1;j++){
				if(tree[j].x-tree[j].y>tree[j+1].x-tree[j+1].y){
					temp = tree[j];
					tree[j] = tree[j+1];
					tree[j+1]= temp;
				}
			}			
		}
	}

	/**
	 * Rysuje białe tło w obszarze wizualizacji
	 * 
	 * @param g Graphics
	 */
	private void bgDraw(Graphics g){
		g.setColor(Color.white);
		g.fillRect(1, 1, bgW - 2, bgH - 2);
	}
	
	/**
	 * Rysuje rzut poziomy lasu
	 * @param g Graphics
	 * @param tree tablica drzew
	 * @param ntree liczba drzew
	 */
	private void miniatureDraw(Graphics g, TreeGUI tree[], int ntree){
		int x = 3;
		int y = 3;
		int h = 200;
		int w = 200;
		int terrainWidth = Simulation.forestLength;
		int terrainHeight = Simulation.forestWidth;
		
		int treeX;
		int treeY;
		
		int Xr = (w/terrainWidth );
		int Yr = (h/terrainHeight);
		int treeXs;
		int treeYs;
		
		double angle;
		
		g.setColor(Color.black);
		g.fillRect(x-1, y-1, w+2, h+2);
		g.setColor(Color.white);
		g.fillRect(x, y, w, h);
		for(int i=0;i<ntree;i++){
			treeX = (int) (x+( tree[i].x+.5)*Xr+w/2);
			treeY = (int) (y+(-tree[i].y-.5)*Yr+h/2);
			treeXs = (int) ((Xr-2)*tree[i].windPower +1);
			treeYs = (int) ((Yr-2)*tree[i].windPower +1);
			angle = tree[i].windRotation*Math.PI;
			g.setColor(tree[i].getCrownColor());			
			g.drawLine(
					treeX,treeY,
					treeX+(int)(treeXs*Math.sin(angle)),
					treeY+(int)(treeYs*Math.cos(angle)));
		}
	}
		
	/**
	 * Wyświetla ramke wizualizacji
	 * 
	 * @param tree tablica drzew
	 * @param ntree liczba drzew
	 */
	public void printFrame(TreeGUI tree[], int ntree) {
		bgW  = BG.getWidth();
		bgH = BG.getHeight();
		Boolean tornadoWasDrawn = false;
		double tornadoDist = TornadoGUI.x-TornadoGUI.y+TornadoGUI.radius(0);
		
		canvas = new BufferedImage(bgW,bgH,BufferedImage.TYPE_INT_ARGB);
		Graphics g = canvas.createGraphics();
				
		bgDraw(g);
		TerrainGUI.draw(g);
		
		sortTrees(tree, ntree); // To Dać po generacji!
		for(int i=0; i<ntree;i++){
			tree[i].drawShadow(g);
		}
		TornadoGUI.drawShadow(canvas,bgW/2,bgH/2);
		for(int i=0; i<ntree;i++){
			if(!tornadoWasDrawn && tornadoDist<tree[i].x-tree[i].y){
				tornadoWasDrawn = true;
				TornadoGUI.draw(canvas,bgW/2,bgH/2);
				TornadoGUI.moveParticles();
			}
			for(int j=0; j<ntree;j++){ //Kolicje wywalic z grafiki
				if(tree[i].collisionTest(tree[j])){
					tree[i].crack();
					tree[j].fall();
				}
			}
			tree[i].draw(g);
		}
						
		miniatureDraw(g, tree, ntree);
        ((Graphics2D) BG.getGraphics()).drawImage(canvas, null, null);
	}	
	
	
}
