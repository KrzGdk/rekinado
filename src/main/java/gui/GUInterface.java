package main.java.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import main.java.gui.RekinadoMain.UIListener;
import java.awt.Polygon;
import main.java.trees.TreeGUI;

public class GUInterface extends javax.swing.JFrame{

	private static boolean started = false;
	private GUIInfo infoBox = null;
	
	public GUInterface() {
		initComponents();
		if (!started) {
			this.add(BG);
			started = true;
			start();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnSim = new javax.swing.JButton();
        BG = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "kontrola"));
        jPanel3.setName("nowa krzyzowka"); // NOI18N

        btnReset.setText("Reset");
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSim.setText("Symuluj");
        btnSim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSimMouseClicked(evt);
            }
        });
        btnSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSim, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 228, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnReset)
                .addComponent(btnSim))
        );

        BG.setBackground(new java.awt.Color(255, 255, 255));
        BG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        BG.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                BGComponentResized(evt);
            }
        });

        javax.swing.GroupLayout BGLayout = new javax.swing.GroupLayout(BG);
        BG.setLayout(BGLayout);
        BGLayout.setHorizontalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        BGLayout.setVerticalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
		listener.actualizeUI(this);
		listener.reset();
    }//GEN-LAST:event_btnResetMouseClicked

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
       //print(lab);
    }//GEN-LAST:event_formComponentResized

    private void BGComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_BGComponentResized
       //print();
    }//GEN-LAST:event_BGComponentResized

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSimMouseClicked
        listener.actualizeUI(this);
		listener.simulate();
    }//GEN-LAST:event_btnSimMouseClicked

    private void btnSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSimActionPerformed

	public static void start() {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUInterface().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BG;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSim;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
       
	private static UIListener listener;
	public void addListener(UIListener l) {
		listener = l;
	}
	public void fileNotFound() {
		dialog("Nie znaleziono pliku");
	}
	private void dialog(String text){
		if(infoBox == null) infoBox = new GUIInfo(this, false);
		infoBox.setVisible(false);
		infoBox.setLocationRelativeTo(this);
		infoBox.setText(text);
		//infoBox.setTitle(text);
		infoBox.setVisible(true);
	}
	
	private int bgWidth ;
	private int bgHeight ;
	public void clearBG(Graphics g){
		bgWidth  = BG.getWidth();
		bgHeight = BG.getHeight();
		g.setColor(Color.white);
		g.fillRect(1, 1, bgWidth - 2, bgHeight - 2);
		
		//g.setColor(new Color(140, 140, 140));
	}
	
	private int printscale = 2;
	private double sin45 = .70710678118654752440084436210484903928483593768847;
	private int toIzoX(double x, double y, double z){
		return (bgWidth/2 )+(int)((x+sin45*y)*printscale);
	}
	private int toIzoY(double x, double y, double z){
		return (bgHeight/2)-(int)((z+sin45*y)*printscale);
	}
	
	private int toIzoX(double tab[]){
		return (bgWidth/2 )+(int)((tab[0]+sin45*tab[1])*printscale);
	}
	private int toIzoY(double tab[]){
		return (bgHeight/2)-(int)((tab[2]+sin45*tab[1])*printscale);
	}
	private void addTreeCord(double tab[], double x, double y, double z){
		tab[0] += x;
		tab[1] += y;
		tab[2] += z;
	}
	
	
	private void drawTerrain(Graphics g){
		int terrainWidth = 50;
		int terrainHeight = 50;
		int terrainBold = 10;
		
		int[] xUp = new int[4];
		int[] yUp = new int[4];
		
		xUp[0] = toIzoX(-terrainWidth/2,-terrainHeight/2,0);
		xUp[1] = toIzoX( terrainWidth/2,-terrainHeight/2,0);
		xUp[2] = toIzoX( terrainWidth/2, terrainHeight/2,0);
		xUp[3] = toIzoX(-terrainWidth/2, terrainHeight/2,0);
		
		yUp[0] = toIzoY(-terrainWidth/2,-terrainHeight/2,0);
		yUp[1] = toIzoY( terrainWidth/2,-terrainHeight/2,0);
		yUp[2] = toIzoY( terrainWidth/2, terrainHeight/2,0);
		yUp[3] = toIzoY(-terrainWidth/2, terrainHeight/2,0);
		
		g.setColor(new Color(35, 92, 39));
		g.fillPolygon(new Polygon(xUp, yUp, 4));
		
		
		xUp[0] = toIzoX(-terrainWidth/2,-terrainHeight/2,-terrainBold);
		xUp[1] = toIzoX( terrainWidth/2,-terrainHeight/2,-terrainBold);
		xUp[2] = toIzoX( terrainWidth/2,-terrainHeight/2,0);
		xUp[3] = toIzoX(-terrainWidth/2,-terrainHeight/2,0);
		
		yUp[0] = toIzoY(-terrainWidth/2,-terrainHeight/2,-terrainBold);
		yUp[1] = toIzoY( terrainWidth/2,-terrainHeight/2,-terrainBold);
		yUp[2] = toIzoY( terrainWidth/2,-terrainHeight/2,0);
		yUp[3] = toIzoY(-terrainWidth/2,-terrainHeight/2,0);
		
		g.setColor(new Color(150, 100, 55));
		g.fillPolygon(new Polygon(xUp, yUp, 4));
		
		xUp[0] = toIzoX( terrainWidth/2,-terrainHeight/2,-terrainBold);
		xUp[1] = toIzoX( terrainWidth/2, terrainHeight/2,-terrainBold);
		xUp[2] = toIzoX( terrainWidth/2, terrainHeight/2,0);
		xUp[3] = toIzoX( terrainWidth/2,-terrainHeight/2,0);
		
		yUp[0] = toIzoY( terrainWidth/2,-terrainHeight/2,-terrainBold);
		yUp[1] = toIzoY( terrainWidth/2, terrainHeight/2,-terrainBold);
		yUp[2] = toIzoY( terrainWidth/2, terrainHeight/2,0);
		yUp[3] = toIzoY( terrainWidth/2,-terrainHeight/2,0);
		
		g.setColor(new Color(100, 50, 5));
		g.fillPolygon(new Polygon(xUp, yUp, 4));
	}
	
	private void moveTree(double p[], TreeGUI tree){
		rotX(p,tree.windPower);
		rotZ(p,tree.windRotation);
		addTreeCord(p,tree.x, tree.y, tree.z);
	}
	private Polygon getTrunk(TreeGUI tree){
		int[] xpoints = new int[4];
		int[] ypoints = new int[4];
		int trunkWidth = 1;
		
		double[] p1 = {-trunkWidth,0,0};
		double[] p2 = {-trunkWidth,0,+tree.height-tree.crownHeight};
		double[] p3 = {+trunkWidth,0,+tree.height-tree.crownHeight};
		double[] p4 = {+trunkWidth,0,0};
		
		moveTree(p1, tree);
		moveTree(p2, tree);
		moveTree(p3, tree);
		moveTree(p4, tree);
		
		xpoints[0] = toIzoX(p1);
		xpoints[1] = toIzoX(p2);
		xpoints[2] = toIzoX(p3);
		xpoints[3] = toIzoX(p4);
		
		ypoints[0] = toIzoY(p1);
		ypoints[1] = toIzoY(p2);
		ypoints[2] = toIzoY(p3);
		ypoints[3] = toIzoY(p4);
		
		return new Polygon(xpoints, ypoints, 4);
	}	
	private Polygon getCrown(TreeGUI tree){
		int[] xpoints = new int[3];
		int[] ypoints = new int[3];
		
		double[] p1 = {0,0,tree.height};
		double[] p2 = { tree.crownWidth/2,0,tree.height-tree.crownHeight};
		double[] p3 = {-tree.crownWidth/2,0,tree.height-tree.crownHeight};
		
		moveTree(p1, tree);
		moveTree(p2, tree);
		moveTree(p3, tree);
		
		xpoints[0] = toIzoX(p1);
		xpoints[1] = toIzoX(p2);
		xpoints[2] = toIzoX(p3);
		
		ypoints[0] = toIzoY(p1);
		ypoints[1] = toIzoY(p2);
		ypoints[2] = toIzoY(p3);
		
		return new Polygon(xpoints, ypoints, 3);
	}
	
	public void print() {
		//System.out.print("PRINT!!!");
		//dialog("Mariusz Nyznar to gej");
		Graphics g = BG.getGraphics();
		clearBG(g);
		drawTerrain(g);
		
		TreeGUI tree = new TreeGUI(0,0,0,15);
		tree.changeWind(1, .5);
		
		g.setColor(new Color(150, 100, 55));
		g.fillPolygon(getTrunk(tree));
		g.setColor(new Color(88,188,63));
		g.fillPolygon(getCrown(tree));
		
		
	}
	
	//Pion
	private void rotX(double[] tab,double r){
		r = -r*Math.PI/2;
		double p[][]={
			{tab[0],0,0,0},
			{0,tab[1],0,0},
			{0,0,tab[2],0},
			{0,0,0,1}};
		double rot[][]={
			{1,0,0,0},
			{0,Math.cos(r),Math.sin(r),0},
			{0,-Math.sin(r),Math.cos(r),0},
			{0,0,0,1}};
		double c[][]={
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}};
		
		for(int i=0; i<4; i++){
			for(int j=0; j<4; j++){
				c[i][j] = p[i][0]*rot[0][j] + p[i][1]*rot[1][j] + p[i][2]*rot[2][j] + p[i][3]*rot[3][j];
			}
		}
		
		for(int i=0; i<3; i++){
			tab[i] = c[0][i]+c[1][i]+c[2][i]+c[3][i];
		}
	}
	
	//Obrót
	private void rotZ(double[] tab,double r){
		r = -r*Math.PI*2;
		double p[][]={
			{tab[0],0,0,0},
			{0,tab[1],0,0},
			{0,0,tab[2],0},
			{0,0,0,1}};
		double rot[][]={
			{Math.cos(r),Math.sin(r),0,0},
			{-Math.sin(r),Math.cos(r),0,0},
			{0,0,1,0},
			{0,0,0,1}};
		double c[][]={
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}};
		
		for(int i=0; i<4; i++){
			for(int j=0; j<4; j++){
				c[i][j] = p[i][0]*rot[0][j] + p[i][1]*rot[1][j] + p[i][2]*rot[2][j] + p[i][3]*rot[3][j];
			}
		}
		
		for(int i=0; i<3; i++){
			tab[i] = c[0][i]+c[1][i]+c[2][i]+c[3][i];
		}
	}
}
